package com.hiscala.ml.exercise


import scala.util.{Try, Success, Failure}
import scala.io.Source

/**
 * Created by Guanjun.Wang on 2016/1/12.
 */
object MLDriver extends App {

  type XY = (Double, Double)
  type XYTSeries = Array[(Double, Double)]
  type DMatrix[T] = Array[Array[T]]
  type DVector[T] = Array[T]
  type DblMatrix = DMatrix[Double]
  type DblVector = Array[Double]
  val ZERO_EPS = 1e-6
  val PI = 3.141592654
  val INV_SQRT_2PI = 1 / (Math.sqrt(2 * PI))

  def load(filename: String): Option[XYTSeries] = {
    import scala.io.Source
    val src = Source.fromFile(filename)
    val fields = src.getLines.map(_.split(",")).toArray
    src.close
    val cols = fields drop 1
    val data = transform(cols)
    Some(data)
  }

  case class Stats[T <% Double](private val values: DVector[T]) {

    //tuple(min, max, sum, sumsqr, size)
    val stats = values.foldLeft((Double.MaxValue, Double.MinValue, 0d, 0d, 0)) {
      case (t, x) => (if (x < t._1) x else t._1, if (x > t._2) x else t._2, t._3 + x, t._4 + x * x, t._5 + 1)
    }

    lazy val mean = stats._3 / stats._5 //stats.sum / values.size
    lazy val variance = (stats._4 - mean * mean * stats._5) / (stats._5 - 1)
    lazy val stdDev = if (variance < ZERO_EPS) ZERO_EPS else Math.sqrt(variance)
    lazy val min = stats._1
    lazy val max = stats._2

    def normalize: DblVector = {
      val range = max - min;
      values.map(x => (x - min) / range)
    }

    def gauss: DblVector =
      values.map(x => {
        val y = x - mean
        INV_SQRT_2PI / stdDev * Math.exp(-0.5 * y * y / variance)
      })
  }

  object YahooFinancials extends Enumeration {
    type YahooFinancials = Value
    val DATE, OPEN, HIGH, LOW, CLOSE, VOLUME, ADJ_CLOSE = Value
    val volatilityF = (fs: Array[String]) => fs(HIGH.id).toDouble - fs(LOW.id).toDouble
    val volumeF = (fs: Array[String]) => fs(VOLUME.id).toDouble
  }

  import YahooFinancials._

  //Test Enumeration// YahooFinancials.values.foreach(x => println(x + "=" + x.id))

  def transform(cols: Array[Array[String]]): XYTSeries = {
    val volatility = Stats[Double](cols.map(YahooFinancials.volatilityF)).normalize
    val volume = Stats[Double](cols.map(YahooFinancials.volumeF)).normalize
    volatility zip volume
  }

  //start
  def run = {
    val d = load("E:\\csco.csv")
    d.get.foreach { case (x, y) => println(x + ":" + y) }
  }

  run
}

